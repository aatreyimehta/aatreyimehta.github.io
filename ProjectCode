import numpy as np
from time import time
import multiprocessing as mp
import pandas
import matplotlib.pyplot as plt
from sklearn import model_selection
from sklearn.linear_model import LogisticRegression
from sklearn.svm import SVC
from sklearn.ensemble import RandomForestClassifier
from sklearn.neural_network import MLPClassifier

url = "Crohn's Dataset.csv"
names = ['FC Level', 'weight', 'height', 'BMI', 'gender', 'crohns']
dataframe = pandas.read_csv(url, names=names)
array = dataframe.values
X = array[:,0:5]
Y = array[:,5]
# prepare configuration for cross validation test harness
seed = 7

def crohn_disease(array, negative, positive):
    
    names = ['FC Level', 'weight', 'height', 'BMI', 'gender', 'crohns']
    dataframe = pandas.read_csv(url, names=names)
    array = dataframe.values
    fcl = dataframe.iloc[:,0]
    # iterating each number in list
    positive, negative = 0, 0
    for num in fcl:
      if num > 250.0:
        positive += 1
      else:
        negative += 1
    print("The number of patients who have tested negative for Crohn's disease: ", negative)
    print("The number of patients who have tested positive for Crohn's disease: ", positive)


# prepare models
models = []
models.append(('LR', LogisticRegression()))
models.append(('SVM', SVC()))
models.append(('RF', RandomForestClassifier()))
models.append(('ANN', MLPClassifier()))

# evaluate each model in turn
results = []
names = []

scoring = 'accuracy'
for name, model in models:
  kfold = model_selection.KFold(n_splits=10, random_state=seed,shuffle = True)
  cv_results = model_selection.cross_val_score(model, X, Y, cv=kfold, scoring=scoring)
  results.append(cv_results)
  names.append(name)
  msg = "%s: %f (%f)" % (name, cv_results.mean(), cv_results.std())
  print(msg)

fig = plt.figure()
ax = fig.add_axes([0,0,1,1])
langs = ['LR', 'SVM', 'RF', 'ANN']

ax.bar(langs,cv_results.mean())
plt.show()


# Step 1: Initialize multiprocessing.Pool()
pool = mp.Pool(mp.cpu_count())
print(pool)
# Step 2: `pool.apply` the crohn_disease()
negative=0
positive=0
results = [pool.apply(crohn_disease, args=(array, negative, positive))]
# Step 3: Close the pool()
pool.close()    
